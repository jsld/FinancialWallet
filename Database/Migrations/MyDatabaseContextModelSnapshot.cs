// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(MyDatabaseContext))]
    partial class MyDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("Database.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.Property<int>("TipoEmpresaId");

                    b.HasKey("Id");

                    b.HasIndex("TipoEmpresaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Database.HistorialTarjetaCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Cuota");

                    b.Property<int?>("HistorialTCId");

                    b.Property<int?>("HistorialTarjetaId");

                    b.Property<int?>("MontoCuota");

                    b.Property<int>("MontoTotal");

                    b.Property<int>("NumeroCuotas");

                    b.Property<int>("PagoId");

                    b.Property<int?>("PagosId");

                    b.Property<int>("TarjetaId");

                    b.Property<int?>("TarjetasId");

                    b.Property<DateTime?>("VencimientoCuota");

                    b.HasKey("Id");

                    b.HasIndex("HistorialTCId");

                    b.HasIndex("PagosId");

                    b.HasIndex("TarjetasId");

                    b.ToTable("HistorialTarjetasCredito");
                });

            modelBuilder.Entity("Database.MasterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<int>("MasterTypeId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("MasterTypeId");

                    b.ToTable("MasterData");
                });

            modelBuilder.Entity("Database.MasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("MasterType");
                });

            modelBuilder.Entity("Database.Pagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Monto");

                    b.Property<int>("TipoDePagoId");

                    b.Property<int>("TransaccionId");

                    b.HasKey("Id");

                    b.HasIndex("TipoDePagoId");

                    b.HasIndex("TransaccionId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Database.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Costo");

                    b.Property<int>("EstadoId");

                    b.Property<bool>("Facturado");

                    b.Property<DateTime>("FechaAdjudicacion");

                    b.Property<DateTime?>("FechaInicio");

                    b.Property<DateTime?>("FechaTermino");

                    b.Property<string>("Name");

                    b.Property<int>("TipoAdjudicacionId");

                    b.Property<int>("TipoDeServicioId");

                    b.Property<int>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoAdjudicacionId");

                    b.HasIndex("TipoDeServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Database.Tarjetas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BancoId");

                    b.Property<string>("Nombre");

                    b.Property<int>("TipoTarjetaId");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("TipoTarjetaId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("Database.Transaccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<int>("EmpresaId");

                    b.Property<int>("EstadoId");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int>("MontoTotal");

                    b.Property<int>("ServicioId");

                    b.Property<int>("TipoTransaccionId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TipoTransaccionId");

                    b.ToTable("Transacciones");
                });

            modelBuilder.Entity("Database.Empresa", b =>
                {
                    b.HasOne("Database.MasterData", "TipoEmpresa")
                        .WithMany()
                        .HasForeignKey("TipoEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.HistorialTarjetaCredito", b =>
                {
                    b.HasOne("Database.HistorialTarjetaCredito", "HistorialTC")
                        .WithMany()
                        .HasForeignKey("HistorialTCId");

                    b.HasOne("Database.Pagos", "Pagos")
                        .WithMany()
                        .HasForeignKey("PagosId");

                    b.HasOne("Database.Tarjetas", "Tarjetas")
                        .WithMany()
                        .HasForeignKey("TarjetasId");
                });

            modelBuilder.Entity("Database.MasterData", b =>
                {
                    b.HasOne("Database.MasterType", "MasterType")
                        .WithMany()
                        .HasForeignKey("MasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Pagos", b =>
                {
                    b.HasOne("Database.MasterData", "TipoDePago")
                        .WithMany()
                        .HasForeignKey("TipoDePagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Transaccion", "Transaccion")
                        .WithMany()
                        .HasForeignKey("TransaccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Servicio", b =>
                {
                    b.HasOne("Database.MasterData", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.MasterData", "TipoAdjudicacion")
                        .WithMany()
                        .HasForeignKey("TipoAdjudicacionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.MasterData", "TipoDeServicio")
                        .WithMany()
                        .HasForeignKey("TipoDeServicioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Tarjetas", b =>
                {
                    b.HasOne("Database.MasterData", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.MasterData", "TipoTarjeta")
                        .WithMany()
                        .HasForeignKey("TipoTarjetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Transaccion", b =>
                {
                    b.HasOne("Database.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.MasterData", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.MasterData", "TipoTransaccion")
                        .WithMany()
                        .HasForeignKey("TipoTransaccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
